local zoom_in_iron = 0.4
local zoom_in_scope = 0.35
local zoom_bad_scope = 0.2
local zoom_in_pistol = 0.6
local gl_fov = 0.45
local default_hud_fov = ui_options.get("video/basic/hud_fov") or 0.6
local zoomed = false
local flag = false

ini_fov = ini_file_ex("items\\weapon_fov_values.ltx")

function get_on_start()
	zoom_in_iron = scope_fov_mcm.get_config("iron_fov") or 0.4
	zoom_in_scope = scope_fov_mcm.get_config("scope_fov") or 0.35
	zoom_bad_scope = scope_fov_mcm.get_config("bad_scope_fov") or 0.2
	zoom_in_pistol = scope_fov_mcm.get_config("pistol_fov") or 0.6
	default_hud_fov = ui_options.get("video/basic/hud_fov") or 0.6
	gl_fov = scope_fov_mcm.get_config("grenade_fov") or 0.45
end

local function on_option_change(mcm)
	default_hud_fov = ui_options.get("video/basic/hud_fov")
	if mcm then
		zoom_in_iron = scope_fov_mcm.get_config("iron_fov") or 0.4
		zoom_in_scope = scope_fov_mcm.get_config("scope_fov") or 0.35
		zoom_bad_scope = scope_fov_mcm.get_config("bad_scope_fov") or 0.2
		zoom_in_pistol = scope_fov_mcm.get_config("pistol_fov") or 0.6
		gl_fov = scope_fov_mcm.get_config("grenade_fov") or 0.45
		if zoomed then
			zoom_in()
		end
	end
end

local temp_fov
local saved_custom = {}
local saved_gls = {}

function zoom_in()
zoomed = true
local weapon = db.actor:active_item()
local scope = utils_item.get_attached_scope(weapon)
local parent = ini_sys:r_string_ex(weapon:section(),"parent_section") or weapon:section()
local is_pistol = ini_sys:r_string_ex(weapon:section(),"kind") == "w_pistol"

local two_dim = weapon and ini_sys:r_float_ex(weapon:section(),"scope_status") == 1
local sec_exist = ini_fov:section_exist(parent)

if (db.actor:active_detector()) then return end

	if weapon and weapon:weapon_in_grenade_mode() then
		if saved_gls[parent] then
			exec_console_cmd("hud_fov " .. saved_gls[parent])
		else
			exec_console_cmd("hud_fov " .. gl_fov)
		end
		temp_fov = saved_gls[parent] or gl_fov
		return
	end
	if saved_custom[weapon:section()] then
		exec_console_cmd("hud_fov " .. saved_custom[weapon:section()])
		temp_fov = saved_custom[weapon:section()]
		return
	end
local iron_fov = ini_fov:r_float_ex(parent, "iron")
	if sec_exist and scope then
	local custom_fov = ini_fov:r_float_ex(parent, scope)
		if scope and custom_fov then
			exec_console_cmd("hud_fov " .. custom_fov)
			temp_fov = custom_fov
			return
		end
	end
	if sec_exist and (not scope) and iron_fov then
		exec_console_cmd("hud_fov " .. iron_fov)
		temp_fov = iron_fov
		return
	end
	if is_pistol then
		exec_console_cmd("hud_fov " .. zoom_in_pistol)
		temp_fov = zoom_in_pistol
		return
	end
	if scope then
		local scope_bad = ini_fov:r_bool_ex("bad_scopes", scope)
		if scope_bad and (not two_dim) then
			exec_console_cmd("hud_fov " .. zoom_bad_scope)
			temp_fov = zoom_bad_scope
		else exec_console_cmd("hud_fov " .. zoom_in_scope)
			temp_fov = zoom_in_scope
		end
	else
		exec_console_cmd("hud_fov " .. zoom_in_iron)
		temp_fov = zoom_in_iron
	end
end

local function zoom_out()
	exec_console_cmd("hud_fov " .. default_hud_fov)
	temp_fov = default_hud_fov
	zoomed = false
end

local function on_key_release(key)
	local weapon = db.actor:active_item()
	if not weapon then return end
	local parent = ini_sys:r_string_ex(weapon:section(),"parent_section") or weapon:section()

	if key == DIK_keys.DIK_LSHIFT then
		flag = false
	end
	if flag and key == DIK_keys.DIK_BACK then
		saved_custom[weapon:section()] = nil
		saved_gls[parent] = nil
		zoom_in()
	end
	
	if key == bind_to_dik(key_bindings.kWPN_FUNC) and zoomed then
		if weapon:weapon_in_grenade_mode() then
			if saved_gls[parent] then
				exec_console_cmd("hud_fov " .. saved_gls[parent])
			else
				exec_console_cmd("hud_fov " .. gl_fov)
			end
			temp_fov = saved_gls[parent] or gl_fov
			return
		else zoom_in()
		end
	end
end

local count = 0

local function on_key_hold(key)
if not (flag and zoomed) then return end
	if (count >= 6) then
		local weapon = db.actor:active_item()
		local parent = ini_sys:r_string_ex(weapon:section(),"parent_section") or weapon:section()
		local saved_fov = saved_custom[weapon:section()] or temp_fov
		local saved_gl_fov = saved_gls[parent] or temp_fov
		if key == DIK_keys.DIK_ADD and (temp_fov < 1) then
			if weapon:weapon_in_grenade_mode() then
				exec_console_cmd("hud_fov " .. (saved_gl_fov + 0.01))
				saved_gls[parent] = saved_gl_fov + 0.01			
				temp_fov = saved_gl_fov + 0.01
			else
				exec_console_cmd("hud_fov " .. (saved_fov + 0.01))
				saved_custom[weapon:section()] = saved_fov + 0.01
				temp_fov = saved_fov + 0.01
			end
		end
		if key == DIK_keys.DIK_SUBTRACT and (temp_fov > 0.1) then
			if weapon:weapon_in_grenade_mode() then
				exec_console_cmd("hud_fov " .. (saved_gl_fov - 0.01))
				saved_gls[parent] = saved_gl_fov - 0.01
				temp_fov = saved_gl_fov - 0.01				
			else
				exec_console_cmd("hud_fov " .. (saved_fov - 0.01))
				saved_custom[weapon:section()] = saved_fov - 0.01
				temp_fov = saved_fov - 0.01
			end
		end
		count = 0
	end
count = count + 1
end

local function shift_press(key)
	if key == DIK_keys.DIK_LSHIFT then
		flag = true
	end
end

local function save_state(mdata)
	mdata.snk_saved_hud_fov = saved_custom
	mdata.snk_saved_gl_fov = saved_gls
end

local function load_state(mdata)
	saved_custom = mdata.snk_saved_hud_fov or {}
	saved_gls = mdata.snk_saved_gl_fov or {}
end

function on_game_start()
	RegisterScriptCallback("save_state", save_state)
	RegisterScriptCallback("load_state", load_state)
	RegisterScriptCallback("actor_on_weapon_zoom_in", zoom_in)
	RegisterScriptCallback("actor_on_weapon_zoom_out", zoom_out)
	RegisterScriptCallback("on_option_change", on_option_change)
	RegisterScriptCallback("on_key_release", on_key_release)
	RegisterScriptCallback("actor_on_net_destroy", zoom_out)
	RegisterScriptCallback("actor_on_before_death", zoom_out)
	RegisterScriptCallback("on_key_press", shift_press)
	RegisterScriptCallback("on_key_hold", on_key_hold)
	get_on_start()
end